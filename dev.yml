services:

  #------------------------------------Builds section start-----------------------------------#
  base-backend:
    image: ${GEONATURE_BACKEND_IMAGE}-wheels
    build:
      context: sources/GeoNature
      dockerfile: backend/Dockerfile
      target: wheels
    entrypoint: /bin/bash -c exit

  base-frontend-source:
    image: ${GEONATURE_FRONTEND_IMAGE}-source
    build:
      context: sources/GeoNature
      dockerfile: frontend/Dockerfile
      target: source
    entrypoint: /bin/bash -c exit

  base-frontend-nginx:
    image: ${GEONATURE_FRONTEND_IMAGE}-nginx
    build:
      context: sources/GeoNature
      dockerfile: frontend/Dockerfile
      target: prod-base
    entrypoint: /bin/sh -c exit

  userhub-build:
    image: ${USERSHUB_IMAGE}
    build:
      target: prod
      context: sources/UsersHub
    volumes:
      - ./config/usershub:/dist/config/
    entrypoint: /bin/sh -c exit

  atlas-build:
    image: ${ATLAS_IMAGE}-app
    build:
      context: sources/GeoNature-atlas
      target: app
    volumes:
      - ./config/atlas:/dist/config/
    entrypoint: /bin/sh -c exit
  #------------------------------------Builds section end------------------------------------#
  geonature-install-db:
    image: ${GEONATURE_BACKEND_EXTRA_IMAGE}
    user: root:root
    depends_on:
      base-backend:
        condition: service_completed_successfully
    volumes:
      - ./sources:/sources
      - ./build/dev/backend_entrypoint.sh:/dev_entrypoint.sh
    build:
      dockerfile: build/dev/Dockerfile-geonature-backend
      args:
        GEONATURE_BACKEND_IMAGE: ${GEONATURE_BACKEND_IMAGE}


  geonature-backend:
    image: ${GEONATURE_BACKEND_EXTRA_IMAGE}
    user: root:root
    depends_on:
      base-backend:
        condition: service_completed_successfully
    volumes:
      - ./sources:/sources
      - ./build/dev/backend_entrypoint.sh:/dev_entrypoint.sh
    entrypoint: ["/dev_entrypoint.sh"]
    build:
      dockerfile: build/dev/Dockerfile-geonature-backend
      args:
        GEONATURE_BACKEND_IMAGE: ${GEONATURE_BACKEND_IMAGE}

  geonature-worker:
    image: ${GEONATURE_BACKEND_EXTRA_IMAGE}
    depends_on:
      base-backend:
        condition: service_completed_successfully
    volumes:
      - ./sources:/sources
    build:
      dockerfile: build/dev/Dockerfile-geonature-backend
      args:
        GEONATURE_BACKEND_IMAGE: ${GEONATURE_BACKEND_IMAGE}
    command: watchmedo auto-restart --directory=/sources/GeoNature --pattern=*.py --recursive -- celery -A geonature.celery_app:app worker --beat --schedule-filename=/dist/media/celerybeat-schedule.db


  geonature-frontend:
      image: ${GEONATURE_FRONTEND_EXTRA_IMAGE}
      depends_on:
        base-frontend-source:
          condition: service_completed_successfully
      build:
        context: .
        dockerfile: build/Dockerfile-geonature-frontend
        target: dev-extra
        args:
          GEONATURE_FRONTEND_IMAGE: ${GEONATURE_FRONTEND_IMAGE}
      volumes:
        - ./sources/GeoNature/frontend:/build
        - ./frontend/external_modules:/build/external_modules
        - ./sources:/sources
        - ./build/dev/frontend_entrypoint.sh:/entrypoint.sh

  geonature-pre-built-db:
    image: ${GEONATURE_PRE_BUILT_DB}
    ports:
      - ${POSTGRES_PORT_ON_HOST}:5432
    environment:
      user_pg: ${POSTGRES_USER}
      password_pg: ${POSTGRES_PASSWORD}
      pg_port: 5432
    networks:
      - gn
    profiles:
      - pre-built-db

  geonature-atlas:
    image: ${ATLAS_IMAGE}
    depends_on:
      atlas-build:
        condition: service_completed_successfully
    volumes:
      - ./sources/GeoNature-atlas:/sources/GeoNature-atlas
    build:
      dockerfile: build/atlas/Dockerfile
      args:
        ATLAS_IMAGE: ${ATLAS_IMAGE}