# Variables à override en ligne de commande si besoin
MKFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
ROOT := $(patsubst %/,%,$(dir $(MKFILE_PATH)))
COMPOSE := docker compose -f $(ROOT)/docker-compose.yml -f $(ROOT)/docker-compose-dev.yml
BRANCH ?= develop
SERVICE ?=

.PHONY: help switch-branch build-backend build-frontend up dev_with_build dev_clean_all migrate db_status \
        cli_geonature cli_monitoring prepare-monitorings-dir link-monitoring-in-container \
        install-monitoring-modules install-monitoring-protocole update-monitoring refresh-monitoring \
        format_backend_check format_backend \
		submodules-apply submodules-apply-full submodules-apply-debug submodules-apply-local submodules-check

## Liste des commandes disponibles
help-dev:
	@echo "Commandes disponibles :"
	@echo ""
	@echo "— Docker / Compose —"
	@echo "  make check-compose               # Affiche la version de docker compose utilisée"
	@echo "  make dev-logs                    # Affiche les logs de tous les services lancés. Possibilité de préciser un ou plusieurs SERVICES=geonature-backend"
	@echo "  make up                          # Lance tous les conteneurs (dev) en arrière-plan"
	@echo "  make build-base                  # Build toutes les images de bases. Peut être utile si docker ne trouve pas les images en local et essaye de tirer des images distantes"
	@echo "  make up-backend                  # Lance uniquement le backend"
	@echo "  make up-frontend                 # Lance uniquement le frontend"
	@echo "  make dev_with_build              # Build + up (environnement de dev)"
	@echo "  make dev_clean_all               # ⚠️ Stop + supprime les volumes (BDD perdue) + caches FE"
	@echo ""
	@echo "— Git / Branches & Submodules —"
	@echo "  make switch-branch BRANCH=<nom>      # Change la branche GeoNature + met à jour les submodules"
	@echo "  make submodules-apply                # Applique les submodules (rapide : shallow/partial)"
	@echo "  make submodules-apply-full           # Applique les submodules (complet : historique + LFS)"
	@echo "  make submodules-apply-debug          # Applique les submodules avec traces Git"
	@echo "  make submodules-apply-with-commit    # Applique avec commit dans le staging area"
	@echo "  make submodules-check                # Vérifications rapides des submodules (ex: GeoNature)"
	@echo ""
	@echo "— Build —"
	@echo "  make build-backend               # Rebuild images backend (api/worker/install-db)"
	@echo "  make build-frontend              # Rebuild image frontend"
	@echo ""
	@echo "— Base de données —"
	@echo "  make migrate                     # Flask-Migrate : autoupgrade"
	@echo "  make db_status                   # État des migrations"
	@echo ""
	@echo "— CLI & Outils —"
	@echo "  make cli-backend ARGS=\"bash\"     # Ouvre un shell dans le conteneur backend"
	@echo "  make cli-frontend ARGS=\"bash\"    # Ouvre un shell dans le conteneur frontend"
	@echo "  make cli_geonature ARGS=\"...\"    # Exécute 'geonature <ARGS>' dans le backend"
	@echo "  make cli_monitoring ARGS=\"...\"   # Exécute 'geonature monitorings <ARGS>'"
	@echo "  make print-VAR                   # Affiche la valeur d'une variable Make (ex: print-COMPOSE)"
	@echo ""
	@echo "— Monitoring (protocoles) —"
	@echo "  make debug-paths-monitoring      # Affiche chemins utiles (host/container) + listings"
	@echo "  make prepare-monitorings-dir     # Crée le dossier media/monitorings dans le conteneur"
	@echo "  make link-monitoring-in-container# Symlink media -> sources/protocoles_monitoring"
	@echo "  make install-monitoring-modules  # Installe les protocoles listés dans \$$MODULES"
	@echo "  make install-monitoring-protocole# Chaîne: link + install des protocoles"
	@echo "  make update-monitoring           # pip install -e du package gn_module_monitoring"
	@echo "  make refresh-monitoring          # Rebuild + up du frontend après update"
	@echo ""
	@echo "— Qualité / Formatage —"
	@echo "  make format_backend_check ARGS=\"path\"  # Black --check (par défaut tout le backend)"
	@echo "  make format_backend ARGS=\"path\"        # Black format (cible un dossier/fichier si fourni)"
	@echo ""
	@echo "Variables utiles (surchageables : make VAR=valeur) :"
	@echo "  BRANCH=$(BRANCH)"
	@echo "  COMPOSE=$(COMPOSE)"
	@echo "  GEONATURE_MEDIA_FOLDER=$(GEONATURE_MEDIA_FOLDER)"
	@echo "  MONITORING_MEDIA=$(MONITORING_MEDIA)"
	@echo "  SUBMODULES_CONF=$(SUBMODULES_CONF)  JOBS=$(JOBS)  DEPTH=$(DEPTH)  FILTER=$(FILTER)  LFS_SKIP=$(GIT_LFS_SKIP_SMUDGE)"
	@echo ""
	@echo "Exemples :"
	@echo "  make switch-branch BRANCH=develop"
	@echo "  make submodules-apply SUBMODULES_CONF=submodules.env JOBS=8"
	@echo "  make cli-backend ARGS=\"bash\""
	@echo "  make print-MONITORING_MEDIA"

print-%: @printf '%s=%s\n' "$*" "$($*)"

check-compose:
	@$(COMPOSE) version

## Affiche les logs (tous ou d'un service si précisé)
dev-logs:
	$(COMPOSE) logs -f $(if $(SERVICE),$(SERVICE))

## Change de branche et met à jour les submodules
switch-branch:
	cd sources/GeoNature && \
	git fetch && \
	git checkout $(BRANCH) && \
	git submodule update --init --recursive

compose:
	$(COMPOSE) $(ARGS)

## Up rapide (dev)
up:
	$(COMPOSE) up -d --force-recreate
	@source .env; echo "Services dev sur: $${BASE_PROTOCOL}://$${HOST}$${GEONATURE_FRONTEND_PREFIX}"

up-backend:
	$(COMPOSE) up -d geonature-backend

up-frontend:
	$(COMPOSE) up -d geonature-frontend

## Stop rapide (dev)
stop:
	$(COMPOSE) stop

down:
	$(COMPOSE) down

## Build images base
build-base:
	$(COMPOSE) build base-backend base-frontend-source base-frontend-nginx userhub-build

## Rebuild des images backend
build-backend:
	$(COMPOSE) build geonature-backend geonature-worker geonature-install-db

## Rebuild des images frontend
build-frontend:
	$(COMPOSE) build geonature-frontend

## Nettoyage destructif (BDD incluse) -> renomme pour expliciter
dev_clean_all:
	@echo "⚠️ ATTENTION: cette commande supprime les volumes (BDD incluse). Ctrl-C pour annuler."
	@sleep 2
	@docker compose down -v --remove-orphans
	@docker builder prune -af
	@sudo rm -rf sources/GeoNature/frontend/node_modules
	@sudo rm -rf sources/GeoNature/frontend/dist
	@sudo rm -rf sources/GeoNature/frontend/.angular
	@find sources/GeoNature/frontend/external_modules -type d -name "node_modules" -exec sudo rm -rf {} +

dev_with_build: dev_init
	@echo "➡️  Lancement de l'environnement de développement..."
	$(COMPOSE) up -d --build
	@source .env; echo "Services dev sur: $${BASE_PROTOCOL}://$${HOST}$${GEONATURE_FRONTEND_PREFIX}"

#################### COMMANDE GN BACKEND ###########################
cli-backend:
	$(COMPOSE) exec geonature-backend $(ARGS)

cli-frontend:
	$(COMPOSE) exec geonature-frontend $(ARGS)
#################### COMMANDE DB GN ###########################
migrate:
	$(COMPOSE) exec geonature-backend geonature db autoupgrade

db_status:
	$(COMPOSE) exec geonature-backend geonature db status

############################ COMMAND GEONATURE #####################
cli_geonature:
	$(COMPOSE) exec geonature-backend geonature $(ARGS)

############################ MODULE MONITORING #####################
cli_monitoring:
	$(COMPOSE) exec geonature-backend geonature monitorings $(ARGS)

# Dossier des protocoles dans le conteneur
SUBMODULES_DIR := /sources/protocoles_monitoring

# Racine media (prend GEONATURE_MEDIA_FOLDER si présent, sinon /dist/media)
GEONATURE_MEDIA_FOLDER ?= /dist/media
MONITORING_MEDIA := $(GEONATURE_MEDIA_FOLDER)/monitorings
MODULE_MONITORING_DIRECTORY = /sources/gn_module_monitoring
MODULES = protocole_exemple
# supprime l’espace de fin de lignes de la liste des modules définie ci dessus. 
MODULES := $(strip $(MODULES))

debug-paths-monitoring:
	@echo "SUBMODULES_DIR=$(SUBMODULES_DIR)"
	@echo "GEONATURE_MEDIA_FOLDER=$(GEONATURE_MEDIA_FOLDER)"
	@echo "MONITORING_MEDIA=$(MONITORING_MEDIA)"
	@echo "MODULES=$(MODULES)"
	@$(COMPOSE) exec -T geonature-backend sh -lc 'echo "[IN CONT] ls $(SUBMODULES_DIR):"; ls -la "$(SUBMODULES_DIR)" || true'
	@$(COMPOSE) exec -T geonature-backend sh -lc 'echo "[IN CONT] ls $(MONITORING_MEDIA):"; ls -la "$(MONITORING_MEDIA)" || true'

prepare-monitorings-dir:
	$(COMPOSE) exec -T geonature-backend mkdir -p $(MONITORING_MEDIA)

# /dist/media/monitorings/<module> -> /sources/protocoles_monitoring/<module>
link-monitoring-in-container: prepare-monitorings-dir
	@for module in $(MODULES); do \
	  [ -n "$$module" ] || continue; \
	  src='$(SUBMODULES_DIR)/'$$module; \
	  dst='$(MONITORING_MEDIA)/'$$module; \
	  echo "→ Link $$module : $$dst -> $$src"; \
	  $(COMPOSE) exec -T geonature-backend sh -lc "\
	    [ -d \"$$src\" ] || { echo '[ERR] '\"$$src\"' introuvable (submodule non init ?)'; exit 1; }; \
	    [ -e \"$$dst\" ] && [ ! -L \"$$dst\" ] && rm -rf \"$$dst\"; \
	    ln -sfn \"$$src\" \"$$dst\"; \
	    ls -ld \"$$dst\"; readlink -f \"$$dst\""; \
	done

install-monitoring-modules:
	@for module in $(MODULES); do \
	  $(COMPOSE) exec -T geonature-backend geonature monitorings install "$$module"; \
	done

install-monitoring-protocole: link-monitoring-in-container install-monitoring-modules

update-monitoring:
	$(COMPOSE) exec geonature-backend pip install -e "${MODULE_MONITORING_DIRECTORY}"

refresh-monitoring: update-monitoring
	$(COMPOSE) build geonature-frontend
	$(COMPOSE) up -d geonature-frontend

############################################## COMMAND DEV CONTRIBUTION  ###############################
format_backend_check:
	$(COMPOSE) exec geonature-backend black --check $(ARGS)

format_backend:
	$(COMPOSE) exec geonature-backend black $(ARGS)

############################################## COMMAND SUBMODULES #####################################
SUBMODULES_CONF ?= submodules.env
# --- Config par défaut (surchageable à l'appel: make … JOBS=4, etc.) ---
SUBMODULES_CONF ?= submodules.env
JOBS            ?= 8
DEPTH           ?= 1           # 1 = shallow, vide pour full history
FILTER          ?= blob:none   # blob:none = partial clone, vide pour désactiver
GIT_LFS_SKIP_SMUDGE ?= 1       # 1 = ne télécharge pas LFS tout de suite
GIT_PROGRESS    ?= 1           # affiche la progression

# Exporter pour que le script les reçoive
export JOBS DEPTH FILTER GIT_LFS_SKIP_SMUDGE GIT_PROGRESS

# Par défaut : rapide (shallow + partial si supporté)
submodules-apply:
	@echo "▶ Running submodules-apply with CONF=$(SUBMODULES_CONF) JOBS=$(JOBS) DEPTH=$(DEPTH) FILTER=$(FILTER)"
	bash build/submodules_apply.sh "$(SUBMODULES_CONF)"

# Clone complet (pas de shallow/partial, LFS activé)
submodules-apply-full:
	@echo "▶ Running FULL clone…"
	DEPTH= FILTER= GIT_LFS_SKIP_SMUDGE=0 bash build/submodules_apply.sh "$(SUBMODULES_CONF)"

# Verbose + traces Git (utile en debug)
submodules-apply-debug:
	@echo "▶ Running DEBUG…"
	DEBUG=1 GIT_TRACE=1 GIT_TRACE_PACKET=1 bash build/submodules_apply.sh "$(SUBMODULES_CONF)"

# Variante locale : applique avec commit (SKIP_COMMIT=1 par défaut dans le script)
submodules-apply-with-commit:
	@echo "▶ Running LOCAL (no commit)…"
	SKIP_COMMIT=0 bash build/submodules_apply.sh "$(SUBMODULES_CONF)"

# Vérifs rapides côté fichiers (GeoNature en exemple, adapte les paths si besoin)
submodules-check:
	@echo "— .gitmodules —"; git config -f .gitmodules --get-regexp '^submodule\..*(path|url|branch)' || true
	@echo "— GeoNature —"
	@git -C sources/GeoNature rev-parse --abbrev-ref HEAD || true
	@git -C sources/GeoNature remote -v || true
	@echo -n "shallow? "; git -C sources/GeoNature rev-parse --is-shallow-repository || true
	@echo -n "partial filter: "; git -C sources/GeoNature config --get remote.origin.partialclonefilter || true
	@echo -n "promisor: "; git -C sources/GeoNature config --get remote.origin.promisor || true
